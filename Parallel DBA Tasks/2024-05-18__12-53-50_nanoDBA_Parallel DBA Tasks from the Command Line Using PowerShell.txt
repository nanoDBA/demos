**********************
PowerShell transcript start
Start time: 20240518125350
Username: DomainName\UserName
RunAs User: DomainName\UserName
Configuration Name: 
Machine: LAPPYXV (Microsoft Windows NT 10.0.22621.0)
Host Application: C:\Program Files\PowerShell\7\pwsh.dll -WorkingDirectory ~
Process ID: 14608
PSVersion: 7.4.2
PSEdition: Core
GitCommitId: 7.4.2
OS: Microsoft Windows 10.0.22621
Platform: Win32NT
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1, 6.0, 7.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
WSManStackVersion: 3.0
**********************
Transcript started, output file is C:\Users\Lars.Rasmussen\OneDrive\##Presentations\2024\Parallel DBA Tasks from the Command Line Using PowerShell\2024-05-18__12-53-50_nanoDBA_Parallel DBA Tasks from the Command Line Using PowerShell.txt
[48;5;m0002î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:00.1882548î‚²12:53:51 PM

>
PS><# #0 object creation RSJob vs PSJobs 
https://learn-powershell.net/2015/03/31/introducing-poshrsjob-as-an-alternative-to-powershell-jobs/  
#>
Write-Verbose "Begin RSJobs Test" -Verbose
$Test = 42
(Measure-Command {
    $results = 1..5|Start-RSJob -Name {"TEST_$($_)"} -ScriptBlock {
        Param($Object)
        $DebugPreference = 'Continue'
        $PSBoundParameters.GetEnumerator() | ForEach {
            Write-Debug $_
        }
        Write-Verbose "Creating object" -Verbose
        New-Object PSObject -Property @{
            Object=$Object
            Test=$Using:Test
        }
    }
}).TotalSeconds
Write-Verbose "End RSJobs Test" -Verbose
# Get-RSJob | Receive-RSJob

Write-Verbose "Begin PSJobs Test" -Verbose
$Test = 42
(Measure-Command {
    1..5 | ForEach {
        Start-Job -Name "TEST_$($_)" -ScriptBlock {
            Param($Object)
            $DebugPreference = 'Continue'
            $PSBoundParameters.GetEnumerator() | ForEach {
                Write-Debug $_ # display the key-value pairs of the hashtable in the debug stream by using Write-Debug - example: DEBUG: Key = Object, Value = 1
            }
            Write-Verbose "Creating object" -Verbose
            New-Object PSObject -Property @{
                Object = $Object
                Test   = $Using:Test
            }
        } -ArgumentList $_
    }
}).TotalSeconds
Write-Verbose "End PSJobs Test" -Verbose
# Get-Job | Receive-Job


>> CommandInvocation(Out-Default): "Out-Default"
VERBOSE: Begin RSJobs Test
PS>ParameterBinding(Out-Default): name="InputObject"; value="2.828872"
2.828872
VERBOSE: End RSJobs Test
VERBOSE: Begin PSJobs Test
PS>ParameterBinding(Out-Default): name="InputObject"; value="3.2624822"
3.2624822
VERBOSE: End PSJobs Test
[48;5;m0003î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:06.1514107î‚²12:55:01 PM

>
PS>. '.\#00 Create-Containers.ps1' -numContainers 4
>> CommandInvocation(Out-Default): "Out-Default"
Container sql01 created on port 1401.
Container sql02 created on port 1402.
Container sql03 created on port 1403.
Container sql04 created on port 1404.
All containers started.
[48;5;m0004î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:07.6376058î‚²12:56:13 PM

>
PS>$contNames
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1401"
localhost:1401
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1402"
localhost:1402
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1403"
localhost:1403
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1404"
localhost:1404
[48;5;m0005î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:00.0440076î‚²12:56:24 PM

>
PS>(pwd).path | clip
>> CommandInvocation(Out-Default): "Out-Default"
[48;5;m0006î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:00.2793404î‚²12:57:22 PM

>
PS>. '.\#1a Get-DbaErrorLog serial.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
PS>ParameterBinding(Out-Default): name="InputObject"; value="$results.Count: 4"
$results.Count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatStartData"

>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.GroupStartData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
PS>ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.GroupEndData"
SqlInstance LogDate             Text
----------- -------             ----                                                                                       
sql01       2024-05-18 16:56:18 The resource database build version is 16.00.4115. This is an informational message only.
                                No user action is required.
sql02       2024-05-18 16:56:18 The resource database build version is 16.00.4115. This is an informational message only.
                                No user action is required.
sql03       2024-05-18 16:56:19 The resource database build version is 16.00.4115. This is an informational message only.
                                No user action is required.
sql04       2024-05-18 16:56:18 The resource database build version is 16.00.4115. This is an informational message only.
                                No user action is required.
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEndData"

[48;5;m0007î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:26.6261396î‚²12:58:46 PM

>
PS>$instances
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1401"
localhost:1401
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1402"
localhost:1402
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1403"
localhost:1403
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1404"
localhost:1404
[48;5;m0008î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:00.0480782î‚²01:02:23 PM

>
PS>. '.\#1b Get-DbaErrorLog parallel.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="$instances count: 4"
$instances count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="$results.Count: 4"
$results.Count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="2024-05-18T13:04:36.9965496-04:00"
2024-05-18T13:04:36.9965496-04:00
[48;5;m0009î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:09.9296028î‚²01:04:37 PM

>
PS>. '.\#3a Restore DB serial.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
PS>ParameterBinding(Out-Default): name="InputObject"; value="@{ComputerName=localhost; InstanceName=MSSQLSERVER; SqlInstance=sql01; Database=pubs; DatabaseName=pubs; DatabaseOwner=sa; Owner=sa; NoRecovery=False; WithReplace=False; KeepReplication=False; RestoreComplete=True; BackupFilesCount=1; RestoredFilesCount=2; BackupSizeMB=5.21; CompressedBackupSizeMB=5.21; BackupFile=/tmp/backup/pubs.bak; RestoredFile=pubs_log.ldf,pubs.mdf; RestoredFileFull=/var/opt/mssql/data/pubs.mdf,/var/opt/mssql/data/pubs_log.ldf; RestoreDirectory=/var/opt/mssql/data; BackupSize=5.21 MB; CompressedBackupSize=5.21 MB; BackupStartTime=2024-03-18 20:07:37; BackupEndTime=2024-03-18 20:07:37; RestoreTargetTime=Latest; Script=System.Collections.Specialized.StringCollection; BackupFileRaw=/tmp/backup/pubs.bak; FileRestoreTime=00:00:01; DatabaseRestoreTime=00:00:01; ExitError=}"

ComputerName         : localhost
InstanceName         : MSSQLSERVER
SqlInstance          : sql01
BackupFile           : /tmp/backup/pubs.bak
BackupFilesCount     : 1
BackupSize           : 5.21 MB
CompressedBackupSize : 5.21 MB
Database             : pubs
Owner                : sa
DatabaseRestoreTime  : 00:00:01
FileRestoreTime      : 00:00:01
NoRecovery           : False
RestoreComplete      : True
RestoredFile         : pubs_log.ldf,pubs.mdf
RestoredFilesCount   : 2
Script               : {RESTORE DATABASE [pubs] FROM  DISK = N'/tmp/backup/pubs.bak' WITH  FILE = 1,  MOVE N'pubs' TO
                       N'/var/opt/mssql/data/pubs.mdf',  MOVE N'pubs_log' TO N'/var/opt/mssql/data/pubs_log.ldf',
                       NOUNLOAD,  STATS = 10}
RestoreDirectory     : /var/opt/mssql/data
WithReplace          : False

PS>ParameterBinding(Out-Default): name="InputObject"; value="@{ComputerName=localhost; InstanceName=MSSQLSERVER; SqlInstance=sql02; Database=pubs; DatabaseName=pubs; DatabaseOwner=sa; Owner=sa; NoRecovery=False; WithReplace=False; KeepReplication=False; RestoreComplete=True; BackupFilesCount=1; RestoredFilesCount=2; BackupSizeMB=5.21; CompressedBackupSizeMB=5.21; BackupFile=/tmp/backup/pubs.bak; RestoredFile=pubs_log.ldf,pubs.mdf; RestoredFileFull=/var/opt/mssql/data/pubs.mdf,/var/opt/mssql/data/pubs_log.ldf; RestoreDirectory=/var/opt/mssql/data; BackupSize=5.21 MB; CompressedBackupSize=5.21 MB; BackupStartTime=2024-03-18 20:07:37; BackupEndTime=2024-03-18 20:07:37; RestoreTargetTime=Latest; Script=System.Collections.Specialized.StringCollection; BackupFileRaw=/tmp/backup/pubs.bak; FileRestoreTime=00:00:01; DatabaseRestoreTime=00:00:01; ExitError=}"
ComputerName         : localhost
InstanceName         : MSSQLSERVER
SqlInstance          : sql02
BackupFile           : /tmp/backup/pubs.bak
BackupFilesCount     : 1
BackupSize           : 5.21 MB
CompressedBackupSize : 5.21 MB
Database             : pubs
Owner                : sa
DatabaseRestoreTime  : 00:00:01
FileRestoreTime      : 00:00:01
NoRecovery           : False
RestoreComplete      : True
RestoredFile         : pubs_log.ldf,pubs.mdf
RestoredFilesCount   : 2
Script               : {RESTORE DATABASE [pubs] FROM  DISK = N'/tmp/backup/pubs.bak' WITH  FILE = 1,  MOVE N'pubs' TO
                       N'/var/opt/mssql/data/pubs.mdf',  MOVE N'pubs_log' TO N'/var/opt/mssql/data/pubs_log.ldf',
                       NOUNLOAD,  STATS = 10}
RestoreDirectory     : /var/opt/mssql/data
WithReplace          : False

PS>ParameterBinding(Out-Default): name="InputObject"; value="@{ComputerName=localhost; InstanceName=MSSQLSERVER; SqlInstance=sql03; Database=pubs; DatabaseName=pubs; DatabaseOwner=sa; Owner=sa; NoRecovery=False; WithReplace=False; KeepReplication=False; RestoreComplete=True; BackupFilesCount=1; RestoredFilesCount=2; BackupSizeMB=5.21; CompressedBackupSizeMB=5.21; BackupFile=/tmp/backup/pubs.bak; RestoredFile=pubs_log.ldf,pubs.mdf; RestoredFileFull=/var/opt/mssql/data/pubs.mdf,/var/opt/mssql/data/pubs_log.ldf; RestoreDirectory=/var/opt/mssql/data; BackupSize=5.21 MB; CompressedBackupSize=5.21 MB; BackupStartTime=2024-03-18 20:07:37; BackupEndTime=2024-03-18 20:07:37; RestoreTargetTime=Latest; Script=System.Collections.Specialized.StringCollection; BackupFileRaw=/tmp/backup/pubs.bak; FileRestoreTime=00:00:01; DatabaseRestoreTime=00:00:01; ExitError=}"
ComputerName         : localhost
InstanceName         : MSSQLSERVER
SqlInstance          : sql03
BackupFile           : /tmp/backup/pubs.bak
BackupFilesCount     : 1
BackupSize           : 5.21 MB
CompressedBackupSize : 5.21 MB
Database             : pubs
Owner                : sa
DatabaseRestoreTime  : 00:00:01
FileRestoreTime      : 00:00:01
NoRecovery           : False
RestoreComplete      : True
RestoredFile         : pubs_log.ldf,pubs.mdf
RestoredFilesCount   : 2
Script               : {RESTORE DATABASE [pubs] FROM  DISK = N'/tmp/backup/pubs.bak' WITH  FILE = 1,  MOVE N'pubs' TO
                       N'/var/opt/mssql/data/pubs.mdf',  MOVE N'pubs_log' TO N'/var/opt/mssql/data/pubs_log.ldf',
                       NOUNLOAD,  STATS = 10}
RestoreDirectory     : /var/opt/mssql/data
WithReplace          : False

PS>ParameterBinding(Out-Default): name="InputObject"; value="@{ComputerName=localhost; InstanceName=MSSQLSERVER; SqlInstance=sql04; Database=pubs; DatabaseName=pubs; DatabaseOwner=sa; Owner=sa; NoRecovery=False; WithReplace=False; KeepReplication=False; RestoreComplete=True; BackupFilesCount=1; RestoredFilesCount=2; BackupSizeMB=5.21; CompressedBackupSizeMB=5.21; BackupFile=/tmp/backup/pubs.bak; RestoredFile=pubs_log.ldf,pubs.mdf; RestoredFileFull=/var/opt/mssql/data/pubs.mdf,/var/opt/mssql/data/pubs_log.ldf; RestoreDirectory=/var/opt/mssql/data; BackupSize=5.21 MB; CompressedBackupSize=5.21 MB; BackupStartTime=2024-03-18 20:07:37; BackupEndTime=2024-03-18 20:07:37; RestoreTargetTime=Latest; Script=System.Collections.Specialized.StringCollection; BackupFileRaw=/tmp/backup/pubs.bak; FileRestoreTime=00:00:01; DatabaseRestoreTime=00:00:01; ExitError=}"
ComputerName         : localhost
InstanceName         : MSSQLSERVER
SqlInstance          : sql04
BackupFile           : /tmp/backup/pubs.bak
BackupFilesCount     : 1
BackupSize           : 5.21 MB
CompressedBackupSize : 5.21 MB
Database             : pubs
Owner                : sa
DatabaseRestoreTime  : 00:00:01
FileRestoreTime      : 00:00:01
NoRecovery           : False
RestoreComplete      : True
RestoredFile         : pubs_log.ldf,pubs.mdf
RestoredFilesCount   : 2
Script               : {RESTORE DATABASE [pubs] FROM  DISK = N'/tmp/backup/pubs.bak' WITH  FILE = 1,  MOVE N'pubs' TO
                       N'/var/opt/mssql/data/pubs.mdf',  MOVE N'pubs_log' TO N'/var/opt/mssql/data/pubs_log.ldf',
                       NOUNLOAD,  STATS = 10}
RestoreDirectory     : /var/opt/mssql/data
WithReplace          : False

[48;5;m0010î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:12.0793802î‚²01:09:54 PM

>
PS>. '.\#3b Restore DB parallel.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="$instances count: 4"
$instances count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="0 results"
0 results
PS>ParameterBinding(Out-Default): name="InputObject"; value="2024-05-18T13:10:09.1879735-04:00"
2024-05-18T13:10:09.1879735-04:00
[48;5;m0011î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:05.3674203î‚²01:10:09 PM

>
PS># Drops parallel
#   using PoshRSJob module
Write-Output "`$instances count`: $($instances.count)"

Get-RSJob | Stop-RSJob; Get-RSJob | Remove-RSJob # stop & remove any existing jobs

### 
$numberParallelThreads = 4

$resultsDrops = Start-RSJob -Throttle $numberParallelThreads -ModulesToImport dbatools -InputObject $instances -Verbose -ScriptBlock { 

    $sqlCred = BetterCredentials\Get-Credential sa
    <# Set certs to be trusted #>Set-DbatoolsConfig -FullName sql.connection.trustcert -Value $true

    $sqlInstance = $_
    $database = 'master'
    Write-Verbose "$sqlInstance..."
    Remove-DbaDatabase -SqlInstance $_ -Database pubs -Confirm:$false `
    -SqlCredential $sqlCred -Verbose

} | Wait-RSJob -ShowProgress <#-Verbose#> | Receive-RSJob <#-Verbose#>

Write-Output "$(($resultsGenPseudoErrors).count) results"
$resultsDrops | Format-Table
Get-Date -Format o
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="$instances count: 4"
$instances count: 4
VERBOSE: Displaying PSBoundParameters
VERBOSE: [Throttle, 4]
VERBOSE: [ModulesToImport, System.String[]]
VERBOSE: [InputObject, System.Object[]]
VERBOSE: [Verbose, True]
VERBOSE: [ScriptBlock,  

    $sqlCred = BetterCredentials\Get-Credential sa
    <# Set certs to be trusted #>Set-DbatoolsConfig -FullName sql.connection.trustcert -Value $true

    $sqlInstance = $_
    $database = 'master'
    Write-Verbose "$sqlInstance..."
    Remove-DbaDatabase -SqlInstance $_ -Database pubs -Confirm:$false `
    -SqlCredential $sqlCred -Verbose

]
VERBOSE: Creating default Job Name
VERBOSE: PowerShell Version: 7
VERBOSE: Creating new runspacepool <8c1d0c7c-987a-4447-b8a6-db6f249eb2cc>
VERBOSE: Incrementing job ID
VERBOSE: Using localhost:1401 as pipeline variable
VERBOSE: Checking for Using: variables
VERBOSE: Checking for ArgumentList
VERBOSE: Invoking Runspace
VERBOSE: Determining Job Name
VERBOSE: Adding RSJob to Jobs queue
VERBOSE: Display RSJob
VERBOSE: Incrementing job ID
VERBOSE: Using localhost:1402 as pipeline variable
VERBOSE: Checking for Using: variables
VERBOSE: Checking for ArgumentList
VERBOSE: Invoking Runspace
VERBOSE: Determining Job Name
VERBOSE: Adding RSJob to Jobs queue
VERBOSE: Display RSJob
VERBOSE: Incrementing job ID
VERBOSE: Using localhost:1403 as pipeline variable
VERBOSE: Checking for Using: variables
VERBOSE: Checking for ArgumentList
VERBOSE: Invoking Runspace
VERBOSE: Determining Job Name
VERBOSE: Adding RSJob to Jobs queue
VERBOSE: Display RSJob
VERBOSE: Incrementing job ID
VERBOSE: Using localhost:1404 as pipeline variable
VERBOSE: Checking for Using: variables
VERBOSE: Checking for ArgumentList
VERBOSE: Invoking Runspace
VERBOSE: Determining Job Name
VERBOSE: Adding RSJob to Jobs queue
VERBOSE: Display RSJob
PS>ParameterBinding(Out-Default): name="InputObject"; value="0 results"
0 results
PS>ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatStartData"

>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.GroupStartData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.GroupEndData"
ComputerName InstanceName SqlInstance Database Status
------------ ------------ ----------- -------- ------
localhost    MSSQLSERVER  sql01       pubs     Dropped
localhost    MSSQLSERVER  sql02       pubs     Dropped
localhost    MSSQLSERVER  sql03       pubs     Dropped
localhost    MSSQLSERVER  sql04       pubs     Dropped
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEndData"

PS>ParameterBinding(Out-Default): name="InputObject"; value="2024-05-18T13:10:29.6178554-04:00"
2024-05-18T13:10:29.6178554-04:00
[48;5;m0012î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:03.1776861î‚²01:10:29 PM

>
PS>. '.\#3b Restore DB parallel.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="$instances count: 4"
$instances count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="0 results"
0 results
PS>ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatStartData"

>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.GroupStartData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEntryData"
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.GroupEndData"
ComputerName InstanceName SqlInstance BackupFile           BackupFilesCount BackupSize CompressedBackupSize Database Owner
------------ ------------ ----------- ----------           ---------------- ---------- -------------------- -------- -----
localhost    MSSQLSERVER  sql01       /tmp/backup/pubs.bak                1 5.21 MB    5.21 MB              pubs     sa
localhost    MSSQLSERVER  sql02       /tmp/backup/pubs.bak                1 5.21 MB    5.21 MB              pubs     sa
localhost    MSSQLSERVER  sql03       /tmp/backup/pubs.bak                1 5.21 MB    5.21 MB              pubs     sa
localhost    MSSQLSERVER  sql04       /tmp/backup/pubs.bak                1 5.21 MB    5.21 MB              pubs     sa
>> ParameterBinding(Out-Default): name="InputObject"; value="Microsoft.PowerShell.Commands.Internal.Format.FormatEndData"

PS>ParameterBinding(Out-Default): name="InputObject"; value="2024-05-18T13:10:38.6939494-04:00"
2024-05-18T13:10:38.6939494-04:00
[48;5;m0013î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:06.1943762î‚²01:10:38 PM

>
PS>$instances = $contNames
foreach ($inst in $instances) {
    Write-Output "Creating stored proc sp_LogHunter on $inst..."
   $sp_LogHunterPath = "$env:USERPROFILE\downloads\Repos\DarlingData\sp_LogHunter\sp_LogHunter.sql"
   Invoke-DbaQuery -SqlInstance $inst -Database master -InputFile $sp_LogHunterPath  -AppendServerInstance -MessagesToOutput -QueryTimeout 500
}
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="Creating stored proc sp_LogHunter on localhost:1401..."
Creating stored proc sp_LogHunter on localhost:1401...
PS>ParameterBinding(Out-Default): name="InputObject"; value="Creating stored proc sp_LogHunter on localhost:1402..."
Creating stored proc sp_LogHunter on localhost:1402...
PS>ParameterBinding(Out-Default): name="InputObject"; value="Creating stored proc sp_LogHunter on localhost:1403..."
Creating stored proc sp_LogHunter on localhost:1403...
PS>ParameterBinding(Out-Default): name="InputObject"; value="Creating stored proc sp_LogHunter on localhost:1404..."
Creating stored proc sp_LogHunter on localhost:1404...
[48;5;m0014î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:01.6458371î‚²01:13:11 PM

>
PS>. '.\#4a serial sp_LogHunter.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="localhost:1401..."
localhost:1401...
PS>ParameterBinding(Out-Default): name="InputObject"; value="localhost:1402..."
localhost:1402...
PS>ParameterBinding(Out-Default): name="InputObject"; value="localhost:1403..."
localhost:1403...
PS>ParameterBinding(Out-Default): name="InputObject"; value="localhost:1404..."
localhost:1404...
[48;5;m0015î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:24.6070126î‚²01:15:22 PM

>
[48;5;m0015î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:24.6070126î‚²01:16:32 PM

>
PS>. '.\#4b parallel sp_LogHunter.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="$instances count: 4"
$instances count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="0 results"
0 results
PS>ParameterBinding(Out-Default): name="InputObject"; value="2024-05-18T13:17:16.2870696-04:00"
2024-05-18T13:17:16.2870696-04:00
[48;5;m0016î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:13.2338251î‚²01:17:16 PM

>
PS>gcm Wait-RSJob
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="Wait-RSJob"

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Function        Wait-RSJob                                         1.7.4.4    PoshRSJob

[48;5;m0017î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:00.1083556î‚²01:20:15 PM

>
PS>. '.\#5 Export past 50 hours of Error 50000 - parallel.ps1'
>> CommandInvocation(Out-Default): "Out-Default"
>> ParameterBinding(Out-Default): name="InputObject"; value="$instances count: 4"
$instances count: 4
PS>ParameterBinding(Out-Default): name="InputObject"; value="$results.Count: 30"
$results.Count: 30
PS>ParameterBinding(Out-Default): name="InputObject"; value="2024-05-18T13:27:54.1848062-04:00"
2024-05-18T13:27:54.1848062-04:00
PS>ParameterBinding(Out-Default): name="InputObject"; value="$results.Count: 30"
$results.Count: 30
PS>ParameterBinding(Out-Default): name="InputObject"; value="30 records exported"
30 records exported
VERBOSE: Adding worksheet 'Error50000'.
VERBOSE: Cell '1:1' add header 'SqlInstance'
VERBOSE: Cell '1:2' add header 'LogDate'
VERBOSE: Cell '1:3' add header 'Text'
VERBOSE: Cell '1:4' add header 'Source'
VERBOSE: Defined table 'Error50000' at A1:D31
VERBOSE: Adding worksheet 'Error50000PivotTable'.
VERBOSE: Auto-sized columns
PS>ParameterBinding(Out-Default): name="InputObject"; value="C:\Users\Lars.Rasmussen\Documents\2024-05-18__132754_Error50000.xlsx exported"
C:\Users\Lars.Rasmussen\Documents\2024-05-18__132754_Error50000.xlsx exported
[48;5;m0018î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:17.2154213î‚²01:28:03 PM

>
PS>ii $filenameExcel
>> CommandInvocation(Out-Default): "Out-Default"
[48;5;m0019î‚°î‚°Cî‚°Parallel DBA Tasks from the Command Line Using PowerShellî‚° [96Gî‚²00:00:07.8228214î‚²01:28:16 PM

>
PS>Stop-Transcript
>> CommandInvocation(Out-Default): "Out-Default"
**********************
PowerShell transcript end
End time: 20240518133244
**********************
